generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Personal {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String
  cref             String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  is_cref_verified CrefOpts  @default(pending)
  role             Role      @default(personal)
  uid_chat         String    @default("")
  city             String    @default("")
  state            String    @default("")
  gender           String    @default("")
  Cref             Cref?
  Page             Page?
  Ratings          Ratings[]
  Classes    Classes[]
  availabilityRules AvailabilityRule[] // Relation to AvailabilityRule
  bookings          Booking[]          // Relation to Booking
}

model Trainee {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  birthdate  DateTime
  role       Role      @default(trainee)
  gender     String    @default("")
  full_name  String    @default("")
  avatar     String    @default("")
  uid_chat   String    @default("")
  city       String    @default("")
  state      String    @default("")
  avatar_url String    @default("")
  Ratings    Ratings[]
  Classes    Classes[]
  bookings Booking[] // Relation to Booking
}

model Log {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  status    String
  meta      Json
}

model Cref {
  cref         String    @id
  type         TypesCref
  name         String
  company      String
  state        String
  city         String
  address      String
  neighborhood String
  zip          String
  phone        String
  personal_id  String    @unique
  personal     Personal  @relation(fields: [personal_id], references: [id])
}

model Page {
  id                 String     @id @default(cuid())
  url                String     @unique
  page_name          String
  personal_id        String     @unique
  about_you          String     @default("")
  background_color   String     @default("")
  expertises         String[]   @default([])
  instagram          String     @default("")
  presentation_video String     @default("")
  profession         String     @default("")
  service_value      String     @default("")
  whatsapp           String     @default("")
  tiktok             String     @default("")
  avatar             String     @default("")
  is_published       Boolean    @default(false)
  personal           Personal   @relation(fields: [personal_id], references: [id])
  avatar_url         String     @default("")
  comments_sort      String     @default("time_desc")
  Visitors           Visitors[]

  @@index([url])
  @@index([personal_id])
}

model Ratings {
  id             String        @default(cuid())
  request        RequestStatus @default(ongoing)
  rating         Int?
  comment        String?
  createdAt      DateTime      @default(now())
  userResponseAt DateTime?
  personal_id    String
  personal       Personal      @relation(fields: [personal_id], references: [id])
  trainee_id     String
  trainee        Trainee       @relation(fields: [trainee_id], references: [id])

  @@unique([trainee_id, personal_id])
}

model Classes {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  status         ClassesStatus @default(pending) // Enum to track the status (pending, accepted, rejected)
  personal_id    String
  trainee_id     String
  elapsed_time   Int         @default(0)
  personal       Personal    @relation(fields: [personal_id], references: [id])
  trainee        Trainee     @relation(fields: [trainee_id], references: [id])
}

model Visitors {
  id               String   @id @default(cuid())
  visitor_id       String?
  visitor_type     String?
  page_id          String
  createdAt        DateTime @default(now())
  type             String
  page             Page     @relation(fields: [page_id], references: [id])
}

model AvailabilityRule {
  id              String         @id @default(uuid())
  personal        Personal   @relation(fields: [personal_id], references: [id])
  personal_id     String
  startTime       String         // Time in 'HH:MM:SS' format
  endTime         String         // Time in 'HH:MM:SS' format
  daysOfWeek      Int[]          // Array of integers (0=Sunday, ..., 6=Saturday)
}

model Booking {
  id              String         @id @default(uuid())
  personal        Personal       @relation(fields: [personal_id], references: [id])
  personal_id     String
  trainee         Trainee       @relation(fields: [trainee_id], references: [id])
  trainee_id      String
  startDatetime   DateTime
  endDatetime     DateTime
  status          BookingStatus
}

enum BookingStatus {
  booked
    cancelled
}

enum TypesCref {
  juridical
  natural
}

enum CrefOpts {
  valid
  invalid
  already_registered
  pending
}

enum Role {
  personal
  trainee
}

enum RequestStatus {
  ongoing
  pending
  accepted
  rejected
}

enum ClassesStatus {
  pending
  accepted
  rejected
  finished
  done
}
